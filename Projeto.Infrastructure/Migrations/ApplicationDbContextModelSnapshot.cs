// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projeto.Infrastructure.Context;

#nullable disable

namespace Projeto.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Projeto.Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagemUrl = "material.jpg",
                            Nome = "Material Escolar"
                        },
                        new
                        {
                            Id = 2,
                            ImagemUrl = "eletronicos.jpg",
                            Nome = "Eletrônicos"
                        },
                        new
                        {
                            Id = 3,
                            ImagemUrl = "acessorios.jpg",
                            Nome = "Acessórios"
                        });
                });

            modelBuilder.Entity("Projeto.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Estoque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ImagemUrl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Preco")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Projeto.Models.Weather.WeatherAirportResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AtmosphericPressure")
                        .HasColumnType("int");

                    b.Property<string>("ConditionCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ConditionDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ICAOCode")
                        .HasColumnType("longtext");

                    b.Property<int?>("Moisture")
                        .HasColumnType("int");

                    b.Property<int?>("Temperature")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdateOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Visibility")
                        .HasColumnType("longtext");

                    b.Property<int?>("Wind")
                        .HasColumnType("int");

                    b.Property<int?>("WindDirection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeatherAirportResponse");
                });

            modelBuilder.Entity("Projeto.Models.Weather.WeatherCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConditionCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ConditionDescription")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("MaxTemperature")
                        .HasColumnType("float");

                    b.Property<float?>("MinTemperature")
                        .HasColumnType("float");

                    b.Property<float?>("UvIndex")
                        .HasColumnType("float");

                    b.Property<int?>("WeatherCityResponseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeatherCityResponseId");

                    b.ToTable("WeatherCity");
                });

            modelBuilder.Entity("Projeto.Models.Weather.WeatherCityResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("UpdateOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("WeatherCityResponse");
                });

            modelBuilder.Entity("Projeto.Domain.Entities.Produto", b =>
                {
                    b.HasOne("Projeto.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Projeto.Models.Weather.WeatherCity", b =>
                {
                    b.HasOne("Projeto.Models.Weather.WeatherCityResponse", null)
                        .WithMany("Weather")
                        .HasForeignKey("WeatherCityResponseId");
                });

            modelBuilder.Entity("Projeto.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Projeto.Models.Weather.WeatherCityResponse", b =>
                {
                    b.Navigation("Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
